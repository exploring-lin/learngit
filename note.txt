创建版本库

代码：mkdir learngit        在当前目录下创建一个空文件夹
      cd learngit           进入该文件夹
      pwd                   显示当前目录
      git init              把当前目录变成Git可以管理的仓库
      git add note.txt      把文件添加到仓库
      git add work/         添加一个空文件夹到版本库；如果是空文件夹，加不了，必须放一个空文件
      git commit -m "wrote a note file"   -m后面输入的是本次提交的说明
      
总结：初始化一个Git仓库，使用git init命令。
      添加文件到Git仓库，分两步：
      1. 使用命令git add <file>, 可以反复使用多次，添加多个文件。
      2. 使用命令git commit -m <message>,完成。

配置文件： 
      1. /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件。
      2. ~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。 
      3. 当前项目的 git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。
         每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。 
      4. 要检查已有的配置信息，可以使用 git config --list 命令
       
时光穿梭机

    版本回退
    
    如果commit（提交）比较多，git log 的内容就会比较多；当满屏放不下，就会显示冒号，回车（往下滚一行）、
    空格（往下滚一页）可以继续查看剩余内容；退出：英文状态下 按 q 可以退出git log 状态。
    
    git commit: 当该命令没有带-m参数时，会跳出commit change log （COMMIT_EDITMSG）界面，这个是vi编辑器（也有可能是vim编辑器），
    和linux的使用时一样的，因为涉及到是否要保存编辑内容，所以退出命令有多种。
    1 保存并退出：
    （1）按 Esc 键退出编辑模式，英文模式下输入 :wq ，然后回车(write and quit)。

    （2）按 Esc 键退出编辑模式，大写英文模式下输入 ZZ ，然后回车。

    2 不保存退出：
     按 Esc 键退出编辑模式，英文模式下输入 :q! ，然后回车。

     按 Esc 键退出编辑模式，英文模式下输入 :qa! ，然后回车。
     
    代码： git log                          显示从最近到最远的提交日志
           git log --pretty=oneline         一行一行显示
           git reset --hard HEAD^           回退到上一个版本
           git reset --hard HEAD~100        回退到上一百个版本
           git reflog                       记录你的每一次操作，用于版本恢复
           
    总结：HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
          穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
          要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
    
    工作区与暂存区
    管理修改
    
    代码： git status                   掌握工作区的状态
           git diff <file>              查看工作区与暂存区的差异
           git diff --cached <file>     查看暂存区与版本库的差异
           git diff HEAD -- <file>      查看工作区与版本库最新版本的差异
           cat readme.txt               查看文件内容
    
    撤销修改       
           git restore <file>           discard changes in working directory
                把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

                一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

                一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
           
                总之，就是让这个文件回到最近一次git commit或git add时的状态。
                
            git restore --staged <file>   暂存区的修改撤销掉（unstage），重新放回工作区
     
    删除文件
            git rm <file>                 删除文件
            git restore --staged <file>   文件误删后，可以把误删的文件恢复到最新版本；先从暂存区撤回到工作区，再从工作区中撤回。
            git restore <file>            
        
远程仓库

    添加远程库
    push an existing repository from the command line:
    
    git remote add origin https://github.com/exploring-lin/learngit.git
    git push -u origin master
    push时的 -u 参数表示把origin这个主机设置为默认远程主机，以后用 git push 就可以把当前分支推送到这个主机上的对应分支，是一种简化写法。
    git push origin master
    
    从远程库克隆
    git clone git@github.com:exploring-lin/gitskills.git
    ls      查看当前文件夹下的所有文件
    
    Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
    使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。
    
分支管理
    
    创建与合并分支
        代码：     git checkout -b dev             创建dev分支，然后切换到dev分支
                   git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：  
                   git branch dev
                   git checkout dev
                   
                   git switch -c dev               创建并切换到新的dev分支
                   git switch master               切换到已有的master分支


                   
                   git branch                      查看当前分支
                   git merge dev                   把dev分支的工作成果合并到master分支上
                                                   git merge命令用于合并指定分支到当前分支。
                   Fast-forward                    “快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
                   git branch -d dev               删除分支dev 
        
        小结
        Git鼓励大量使用分支：

        查看分支：git branch

        创建分支：git branch <name>

        切换分支：git checkout <name>或者git switch <name>

        创建+切换分支：git checkout -b <name>或者git switch -c <name>

        合并某分支到当前分支：git merge <name>

        删除分支：git branch -d <name>
        
        删除远程分支：先通过git branch -d <branch name>删除本地分支，再通过git push origin :<branch name>删除远程分支
                      git push origin -d <branch name>好像效果一样
    
    解决冲突
        代码：git merge feature1   出现冲突；Automatic merge failed; fix conflicts and then commit the result.
                                   修改后，再提交。
              git log --graph --pretty=oneline --abbrev-commit       用带参数的git log也可以看到分支的合并情况。
              git branch -d feature1    删除分支feature1
              
        小结：
        当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

        解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

        用git log --graph命令可以看到分支合并图。
    
    分支管理策略
        代码：git merge --no-ff -m "merge with no-ff" dev      --no-ff参数，表示禁用Fast forward
                                                               本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去
              git log --graph --pretty=oneline --abbrev-commit 查看分支历史
        
        在实际开发中，我们应该按照几个基本原则进行分支管理：

        首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

        干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

        你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
    
    Bug分支
        代码：git stash            把当前工作现场“储藏”起来，等以后恢复现场后继续工作
              git stash list       查看之前存储的工作现场
              git stash apply      恢复工作现场，但是恢复后，stash内容并不删除
              git stash drop       恢复工作现场，同时把stash内容也删了
              可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令git stash apply stash@{0}
              
              stash,就像是把当前的WIP压栈，(这里WIP的含义就是所有修改了但未commit的数据)，然后再一个一个取出来,
              默认的git stash pop是按照自栈顶开始的顺序依次出栈,也可以使用git stash pop stash@{num}的方式取出指定的WIP 
              我们可以用git stash list查看当前压栈了多少个WIP

              注意:git stash不能将未被追踪的文件(untracked file)压栈,也就是从未被git add过的文件,
              也就是你在使用git status命令看到的提示Untracked files所列出的文件,
              所以在git stash之前一定要用git status确认没有Untracked files

              git cherry-pick <commit>   复制一个特定的提交到当前分支,注意，必须在当前分支的工作区干净的情况下进行。
          
        小结

        修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

        当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；

        在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。
    
    Feature分支
    小结

    开发一个新feature，最好新建一个分支；

    如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
    
	多人协作
		代码：git remote					查看远程库的信息
			  git remote -v					查看更详细的信息
			  git push origin master		推送master分支
			  git push origin dev			推送dev分支
			  git clone git@github.com:michaelliao/learngit.git		克隆远程库到自己的电脑
			  当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。
			  git switch -c dev origin/dev 	创建远程origin的dev分支到本地
		
        多人协作的工作模式通常是这样：

            1.首先，可以试图用git push origin <branch-name>推送自己的修改；


            2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；


            3.如果合并有冲突，则解决冲突，并在本地提交；


            4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！


            如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

        小结

        查看远程库信息，使用git remote -v；


        本地新建的分支如果不推送到远程，对其他人就是不可见的；


        从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；


        在本地创建和远程分支对应的分支，使用git switch -c branch-name origin/branch-name，本地和远程分支的名称最好一致；


        建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；


        从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
        
    Rebase
        代码：git rebase    变基，把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。
              git log --graph --pretty=oneline --abbrev-commit  查看代码提交历史
        小结

            rebase操作可以把本地未push的分叉提交历史整理成直线；

            rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。


              






    
自定义Git
    
    配置别名
    代码：git config --global alias.st status
          git config --global alias.ci commit
          git config --global alias.br branch
    
    
    

Git is a distributed version control system.
Git is a free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
Creating a new branch is quick and simple.