创建版本库

代码：mkdir learngit        在当前目录下创建一个空文件夹
      cd learngit           进入该文件夹
      pwd                   显示当前目录
      git init              把当前目录变成Git可以管理的仓库
      git add note.txt      把文件添加到仓库
      git add work/         添加一个空文件夹到版本库；如果是空文件夹，加不了，必须放一个空文件
      git commit -m "wrote a note file"   -m后面输入的是本次提交的说明
      
总结：初始化一个Git仓库，使用git init命令。
      添加文件到Git仓库，分两步：
      1. 使用命令git add <file>, 可以反复使用多次，添加多个文件。
      2. 使用命令git commit -m <message>,完成。

配置文件： 
      1. /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件。
      2. ~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。 
      3. 当前项目的 git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。
         每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。 
      4. 要检查已有的配置信息，可以使用 git config --list 命令
       
时光穿梭机

    版本回退
    
    如果commit（提交）比较多，git log 的内容就会比较多；当满屏放不下，就会显示冒号，回车（往下滚一行）、
    空格（往下滚一页）可以继续查看剩余内容；退出：英文状态下 按 q 可以退出git log 状态。
    
    git commit: 当该命令没有带-m参数时，会跳出commit change log （COMMIT_EDITMSG）界面，这个是vi编辑器（也有可能是vim编辑器），
    和linux的使用时一样的，因为涉及到是否要保存编辑内容，所以退出命令有多种。
    1 保存并退出：
    （1）按 Esc 键退出编辑模式，英文模式下输入 :wq ，然后回车(write and quit)。

    （2）按 Esc 键退出编辑模式，大写英文模式下输入 ZZ ，然后回车。

    2 不保存退出：
     按 Esc 键退出编辑模式，英文模式下输入 :q! ，然后回车。

     按 Esc 键退出编辑模式，英文模式下输入 :qa! ，然后回车。
     
    代码： git log                          显示从最近到最远的提交日志
           git log --pretty=oneline         一行一行显示
           git reset --hard HEAD^           回退到上一个版本
           git reset --hard HEAD~100        回退到上一百个版本
           git reflog                       记录你的每一次操作，用于版本恢复
           
    总结：HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
          穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
          要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
    
    工作区与暂存区
    管理修改
    
    代码： git status                   掌握工作区的状态
           git diff <file>              查看工作区与暂存区的差异
           git diff --cached <file>     查看暂存区与版本库的差异
           git diff HEAD -- <file>      查看工作区与版本库最新版本的差异
           cat readme.txt               查看文件内容
    
    撤销修改       
           git restore <file>           discard changes in working directory
                把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

                一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

                一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
           
                总之，就是让这个文件回到最近一次git commit或git add时的状态。
                
            git restore --staged <file>   暂存区的修改撤销掉（unstage），重新放回工作区
     
    删除文件
            git rm <file>                 删除文件
            git restore --staged <file>   文件误删后，可以把误删的文件恢复到最新版本；先从暂存区撤回到工作区，再从工作区中撤回。
            git restore <file>            
        
远程仓库

    添加远程库
    push an existing repository from the command line:
    
    git remote add origin https://github.com/exploring-lin/learngit.git
    git push -u origin master
    push时的 -u 参数表示把origin这个主机设置为默认远程主机，以后用 git push 就可以把当前分支推送到这个主机上的对应分支，是一种简化写法。
    git push origin master
    
    从远程库克隆
    git clone git@github.com:exploring-lin/gitskills.git
    ls      查看当前文件夹下的所有文件
    
    Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
    使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。
    
分支管理
    
    创建与合并分支
    
    
自定义Git
    
    配置别名
    代码：git config --global alias.st status
          git config --global alias.ci commit
          git config --global alias.br branch
    
    
    

Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
